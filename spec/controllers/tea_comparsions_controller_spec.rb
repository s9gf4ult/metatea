require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TeaComparsionsController do

  before :each do
    @user = FactoryGirl.create :user
    @tea1 = FactoryGirl.create :tea
    @tea2 = FactoryGirl.create :tea
    @comp_attr = FactoryGirl.attributes_for(:tea_comparsion,
                                            :user_id => @user.id,
                                            :left_tea_id => @tea1.id,
                                            :right_tea_id => @tea2.id)
    sign_in @user
  end

  def self.other_user
    before :each do
      sign_out @user
      @new_user = FactoryGirl.create :user
      sign_in @new_user
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new TeaComparsion" do
        expect {
          post :create, {:tea_comparsion => @comp_attr}
        }.to change(TeaComparsion, :count).by(1)
      end
    end

    describe "when already created" do
      before :each do
        @comp = TeaComparsion.create @comp_attr
        @new_comp_attr = @comp_attr.clone
        @new_comp_attr[:left_tea_id] = @comp_attr[:right_tea_id]
        @new_comp_attr[:right_tea_id] = @comp_attr[:left_tea_id]
      end

      it "remove old" do
        expect do
          post :create, {:tea_comparsion => @new_comp_attr}
        end.to_not change(TeaComparsion, :count)
        comp = TeaComparsion.where(:id => @comp.id).all
        comp.should eq([])
      end

      describe "when other user" do
        other_user

        it "not removes old" do
          expect do
            post :create, {:tea_comparsion => @new_comp_attr}
          end.to change(TeaComparsion, :count).by(1)
          comp = TeaComparsion.where(:id => @comp.id).all
          comp.should eq([@comp])
        end
      end
    end
  end

  describe "DELETE destroy" do
    before :each do
      @comp = TeaComparsion.create @comp_attr
    end

    it "destroys the requested tea_comparsion" do
      expect {
        delete :destroy, {:id => @comp.to_param}
      }.to change(TeaComparsion, :count).by(-1)
    end

    describe "when other user" do
      other_user

      it "do not destroy comparsion" do
        expect do
          delete :destroy, {:id => @comp.to_param}
        end.to_not change(TeaComparsion, :count)
      end
    end
  end
end
