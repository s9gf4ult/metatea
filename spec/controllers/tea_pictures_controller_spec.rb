require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TeaPicturesController do
  before :each do
    @user = FactoryGirl.create :user
    sign_in @user
    @tea_picture_attrs = FactoryGirl.attributes_for(:tea_picture,
                                                    :user_id => @user.id)
  end

  def self.create_picture
    before :each do
      @tea_picture = TeaPicture.create @tea_picture_attrs
    end
  end

  describe "GET show" do
    create_picture

    it "assigns the requested tea_picture as @tea_picture" do
      get :show, {:id => @tea_picture.id}
      assigns(:tea_picture).should eq(@tea_picture)
    end
  end

  describe "GET new" do
    it "assigns a new tea_picture as @tea_picture" do
      get :new, {}
      assigns(:tea_picture).should be_a_new(TeaPicture)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new TeaPicture" do
        expect {
          post :create, {:tea_picture => @tea_picture_attrs}
        }.to change(TeaPicture, :count).by(1)
      end

      it "assigns a newly created tea_picture as @tea_picture" do
        post :create, {:tea_picture => @tea_picture_attrs}
        assigns(:tea_picture).should be_a(TeaPicture)
        assigns(:tea_picture).should be_persisted
      end

      it "redirects to the tea" do
        tea = Tea.find @tea_picture_attrs[:tea_id]
        post :create, {:tea_picture => @tea_picture_attrs}
        response.should redirect_to(tea)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved tea_picture as @tea_picture" do
        # Trigger the behavior that occurs when invalid params are submitted
        TeaPicture.any_instance.stub(:save).and_return(false)
        post :create, {:tea_picture => {  }}
        assigns(:tea_picture).should be_a_new(TeaPicture)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        TeaPicture.any_instance.stub(:save).and_return(false)
        post :create, {:tea_picture => {  }}
        response.should render_template("new")
      end
    end
  end

  describe "DELETE destroy" do
    def self.can_destroy
      it "destroys the requested tea_picture" do
        expect {
          delete :destroy, {:id => @tea_picture.to_param}
        }.to change(TeaPicture, :count).by(-1)
      end

      it "redirects to the tea" do
        tea = @tea_picture.tea
        delete :destroy, {:id => @tea_picture.to_param}
        response.should redirect_to(tea)
      end
    end

    def self.can_not_destroy
      it "do not destroy tea_picture" do
        expect do
          delete :destroy, {:id => @tea_picture.to_param}
        end.to_not change(TeaPicture, :count)
      end
    end

    describe "if i am a tea owner" do
      before :each do
        @tea_picture = TeaPicture.create @tea_picture_attrs
        @new_user = @tea_picture.tea.user
        sign_out @user
        sign_in @new_user
      end
      can_destroy
    end

    describe "if i am a picture owner" do
      create_picture
      can_destroy
    end

    describe "if i am other user" do
      before :each do
        @tea_picture = TeaPicture.create @tea_picture_attrs
        @new_user = FactoryGirl.create :user
        sign_out @user
        sign_in @new_user
      end
      can_not_destroy
    end
  end

end
